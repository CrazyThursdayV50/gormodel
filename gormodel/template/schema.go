package template

import (
	"fmt"
	"gormodel/gormodel/sql"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

var SchemaFormat = []string{
	"package %s",
	"/* ======================",
	"** DO NOT EDIT THIS FILE!",
	"** ======================",
	"** GENERATED WITH GOMODEL",
	"** Time: %s",
	"** Author: CrazyThursdayV50",
	"*/",
	"",
	"%s",
	"",
	"func (t *%s) TableName() string {",
	"	return Schema() + \".%s\"",
	"}",
}

var defaultSchemaFormat = []string{
	"/* ======================",
	"** DO NOT EDIT THIS FILE!",
	"** ======================",
	"** GENERATED WITH GOMODEL",
	"** Time: %s",
	"** Author: CrazyThursdayV50",
	"*/",
	"",
	"package %s",
	"",
	"import \"gorm.io/gorm\"",
	"import \"gorm.io/gorm/clause\"",
	"",
	"var schema = \"schema\"",
	"",
	"func Schema() string {",
	"	return schema",
	"}",
	"",
	"func SetSchema(val string) {",
	"	if val == \"\" {",
	"		return",
	"	}",
	"",
	"	schema = val",
	"}",
	"",
	"type tabler interface {",
	"		TableName() string",
	"}",
	"",
	"func DefaultFindInBatchesCallback(f func()) func(db *gorm.DB, batch int) error {",
	"		return func(db *gorm.DB, batch int) error {",
	"			f()",
	"			return db.Error",
	"		}",
	"}",
	"",
	"type Column[T any] string",
	"",
	"func (c Column[T]) String() string {",
	"	return \"`\"+ string(c) +\"`\"",
	"}",
	"",
	"func (c Column[T]) Equal(value T) func(*gorm.DB) *gorm.DB {",
	"	return func(d *gorm.DB) *gorm.DB {",
	"		return d.Where(fmt.Sprintf(\"%%s=?\", c), value)",
	"	}",
	"}",
	"",
	"func (c Column[T]) In(value []T) func(*gorm.DB) *gorm.DB {",
	"	return func(d *gorm.DB) *gorm.DB {",
	"		return d.Where(fmt.Sprintf(\"%%s IN ?\", c), value)",
	"	}",
	"}",
	"",
	"func (c Column[T]) IsNull() func(*gorm.DB) *gorm.DB {",
	"	return func(d *gorm.DB) *gorm.DB {",
	"		return d.Where(fmt.Sprintf(\"%%s IS NULL\", c))",
	"	}",
	"}",
	"",
	"func (c Column[T]) Max() func(*gorm.DB) *gorm.DB {",
	"	return func(d *gorm.DB) *gorm.DB {",
	"		return d.Select(fmt.Sprintf(\"MAX(%%[1]s) AS %%[1]s\", c))",
	"	}",
	"}",
	"",
	"func (c Column[T]) OrderAsc() func(*gorm.DB) *gorm.DB {",
	"	return func(d *gorm.DB) *gorm.DB {",
	"		return d.Order(clause.OrderByColumn{",
	"				Column: clause.Column	{",
	"					Name: c.String(),",
	"				},",
	"			Desc: false,",
	"		})",
	"	}",
	"}",
	"",
	"func (c Column[T]) OrderDesc() func(*gorm.DB) *gorm.DB {",
	"	return func(d *gorm.DB) *gorm.DB {",
	"		return d.Order(clause.OrderByColumn{",
	"				Column: clause.Column	{",
	"					Name: c.String(),",
	"				},",
	"			Desc: true,",
	"		})",
	"	}",
	"}",
	"",
	"func (c Column[T]) LessThan(value T) func(*gorm.DB) *gorm.DB {",
	"		return func(d *gorm.DB) *gorm.DB {",
	"			return d.Where(fmt.Sprintf(\"%%s<?\", c), value)",
	"		}",
	"}",
	"",
	"func (c Column[T]) LessEqual(value T) func(*gorm.DB) *gorm.DB {",
	"		return func(d *gorm.DB) *gorm.DB {",
	"			return d.Where(fmt.Sprintf(\"%%s<=?\", c), value)",
	"		}",
	"}",
	"",
	"func (c Column[T]) GreaterThan(value T) func(*gorm.DB) *gorm.DB {",
	"		return func(d *gorm.DB) *gorm.DB {",
	"			return d.Where(fmt.Sprintf(\"%%s>?\", c), value)",
	"		}",
	"}",
	"",
	"func (c Column[T]) GreaterEqual(value T) func(*gorm.DB) *gorm.DB {",
	"		return func(d *gorm.DB) *gorm.DB {",
	"			return d.Where(fmt.Sprintf(\"%%s>=?\", c), value)",
	"		}",
	"}",
	"",
	"func (c Column[T]) Between(a, b T) func(*gorm.DB) *gorm.DB {",
	"		return func(d *gorm.DB) *gorm.DB {",
	"			return d.Where(fmt.Sprintf(\"%%s BETWEEN ? and ?\", c), a, b)",
	"		}",
	"}",
}

// 从已有的文件中读取 schema，备份原来的 .go 文件
func CheckDefaultSchema(fileName string) {
	pkg := sql.ReadPackage(fileName)
	dir := filepath.Dir(fileName)
	schemaFile := filepath.Join(dir, "Schema.model.go")
	os.Rename(schemaFile, schemaFile+".bak")
	file, err := os.Create(schemaFile)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	format := strings.Join(defaultSchemaFormat, "\n")
	fmt.Fprintf(file, format, time.Now().Format(time.RFC3339), pkg)

	cmd := exec.Command("goimports", "-w", schemaFile)
	cmd.Run()
}
