package blog

import "time"

/* ======================
** DO NOT EDIT THIS FILE!
** ======================
** GENERATED WITH GOMODEL
** Time: 2025-03-09T13:35:39+08:00
** Author: Gormodel
 */

type Comment struct {
	Id        int64     `gorm:"column:id;type:INT UNSIGNED;primaryKey;not null;autoIncrement" json:"id"`
	PostId    int64     `gorm:"column:post_id;type:INT UNSIGNED;index:idx_post;not null" json:"post_id"`
	UserId    int64     `gorm:"column:user_id;type:INT UNSIGNED;index:idx_user;not null" json:"user_id"`
	ParentId  int64     `gorm:"column:parent_id;type:INT UNSIGNED;index:idx_parent;not null;default:0" json:"parent_id"`
	Content   string    `gorm:"column:content;type:TEXT;not null" json:"content"`
	Status    int64     `gorm:"column:status;type:TINYINT;index:idx_status;not null;default:1" json:"status"`
	LikeCount int64     `gorm:"column:like_count;type:INT UNSIGNED;not null;default:0" json:"like_count"`
	Ip        string    `gorm:"column:ip;type:VARCHAR(45);size:45;not null;default:''" json:"ip"`
	UserAgent string    `gorm:"column:user_agent;type:VARCHAR(255);size:255;not null;default:''" json:"user_agent"`
	CreatedAt time.Time `gorm:"column:created_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP" json:"created_at"`
	UpdatedAt time.Time `gorm:"column:updated_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" json:"updated_at"`
}

func comment_id() Column[int64] {
	return "id"
}

func (s *Comment) ColumnId() Column[int64] {
	return comment_id()
}

func comment_post_id() Column[int64] {
	return "post_id"
}

func (s *Comment) ColumnPostId() Column[int64] {
	return comment_post_id()
}

func comment_user_id() Column[int64] {
	return "user_id"
}

func (s *Comment) ColumnUserId() Column[int64] {
	return comment_user_id()
}

func comment_parent_id() Column[int64] {
	return "parent_id"
}

func (s *Comment) ColumnParentId() Column[int64] {
	return comment_parent_id()
}

func comment_content() Column[string] {
	return "content"
}

func (s *Comment) ColumnContent() Column[string] {
	return comment_content()
}

func comment_status() Column[int64] {
	return "status"
}

func (s *Comment) ColumnStatus() Column[int64] {
	return comment_status()
}

func comment_like_count() Column[int64] {
	return "like_count"
}

func (s *Comment) ColumnLikeCount() Column[int64] {
	return comment_like_count()
}

func comment_ip() Column[string] {
	return "ip"
}

func (s *Comment) ColumnIp() Column[string] {
	return comment_ip()
}

func comment_user_agent() Column[string] {
	return "user_agent"
}

func (s *Comment) ColumnUserAgent() Column[string] {
	return comment_user_agent()
}

func comment_created_at() Column[time.Time] {
	return "created_at"
}

func (s *Comment) ColumnCreatedAt() Column[time.Time] {
	return comment_created_at()
}

func comment_updated_at() Column[time.Time] {
	return "updated_at"
}

func (s *Comment) ColumnUpdatedAt() Column[time.Time] {
	return comment_updated_at()
}

func (t *Comment) TableName() string {
	return Schema() + ".comment"
}
