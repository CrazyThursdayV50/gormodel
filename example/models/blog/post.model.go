package blog

import "time"

/* ======================
** DO NOT EDIT THIS FILE!
** ======================
** GENERATED WITH GOMODEL
** Time: 2025-03-09T13:35:39+08:00
** Author: Gormodel
 */

type Post struct {
	Id            int64      `gorm:"column:id;type:INT UNSIGNED;primaryKey;not null;autoIncrement" json:"id"`
	UserId        int64      `gorm:"column:user_id;type:INT UNSIGNED;index:idx_user;not null" json:"user_id"`
	Title         string     `gorm:"column:title;type:VARCHAR(200);size:200;not null" json:"title"`
	Slug          string     `gorm:"column:slug;type:VARCHAR(200);size:200;uniqueIndex:uk_slug;not null" json:"slug"`
	Content       string     `gorm:"column:content;type:TEXT;not null" json:"content"`
	Excerpt       string     `gorm:"column:excerpt;type:VARCHAR(500);size:500;not null;default:''" json:"excerpt"`
	Status        int64      `gorm:"column:status;type:TINYINT;index:idx_status;not null;default:1" json:"status"`
	CommentStatus int64      `gorm:"column:comment_status;type:TINYINT;not null;default:1" json:"comment_status"`
	ViewCount     int64      `gorm:"column:view_count;type:INT UNSIGNED;not null;default:0" json:"view_count"`
	CommentCount  int64      `gorm:"column:comment_count;type:INT UNSIGNED;not null;default:0" json:"comment_count"`
	LikeCount     int64      `gorm:"column:like_count;type:INT UNSIGNED;not null;default:0" json:"like_count"`
	PublishedAt   *time.Time `gorm:"column:published_at;type:DATETIME;index:idx_published_at;default:NULL COMMENT " json:"published_at"`
	CreatedAt     time.Time  `gorm:"column:created_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP" json:"created_at"`
	UpdatedAt     time.Time  `gorm:"column:updated_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" json:"updated_at"`
}

func post_id() Column[int64] {
	return "id"
}

func (s *Post) ColumnId() Column[int64] {
	return post_id()
}

func post_user_id() Column[int64] {
	return "user_id"
}

func (s *Post) ColumnUserId() Column[int64] {
	return post_user_id()
}

func post_title() Column[string] {
	return "title"
}

func (s *Post) ColumnTitle() Column[string] {
	return post_title()
}

func post_slug() Column[string] {
	return "slug"
}

func (s *Post) ColumnSlug() Column[string] {
	return post_slug()
}

func post_content() Column[string] {
	return "content"
}

func (s *Post) ColumnContent() Column[string] {
	return post_content()
}

func post_excerpt() Column[string] {
	return "excerpt"
}

func (s *Post) ColumnExcerpt() Column[string] {
	return post_excerpt()
}

func post_status() Column[int64] {
	return "status"
}

func (s *Post) ColumnStatus() Column[int64] {
	return post_status()
}

func post_comment_status() Column[int64] {
	return "comment_status"
}

func (s *Post) ColumnCommentStatus() Column[int64] {
	return post_comment_status()
}

func post_view_count() Column[int64] {
	return "view_count"
}

func (s *Post) ColumnViewCount() Column[int64] {
	return post_view_count()
}

func post_comment_count() Column[int64] {
	return "comment_count"
}

func (s *Post) ColumnCommentCount() Column[int64] {
	return post_comment_count()
}

func post_like_count() Column[int64] {
	return "like_count"
}

func (s *Post) ColumnLikeCount() Column[int64] {
	return post_like_count()
}

func post_published_at() Column[*time.Time] {
	return "published_at"
}

func (s *Post) ColumnPublishedAt() Column[*time.Time] {
	return post_published_at()
}

func post_created_at() Column[time.Time] {
	return "created_at"
}

func (s *Post) ColumnCreatedAt() Column[time.Time] {
	return post_created_at()
}

func post_updated_at() Column[time.Time] {
	return "updated_at"
}

func (s *Post) ColumnUpdatedAt() Column[time.Time] {
	return post_updated_at()
}

func (t *Post) TableName() string {
	return Schema() + ".post"
}
