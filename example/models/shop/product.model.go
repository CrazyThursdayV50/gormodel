package shop

import "time"

/* ======================
** DO NOT EDIT THIS FILE!
** ======================
** GENERATED WITH GOMODEL
** Time: 2025-03-09T13:35:39+08:00
** Author: Gormodel
 */

type Product struct {
	Id            int64     `gorm:"column:id;type:INT UNSIGNED;primaryKey;not null;autoIncrement" json:"id"`
	Name          string    `gorm:"column:name;type:VARCHAR(200);size:200;not null" json:"name"`
	Sku           string    `gorm:"column:sku;type:VARCHAR(50);size:50;uniqueIndex:uk_sku;not null" json:"sku"`
	Description   *string   `gorm:"column:description;type:TEXT" json:"description"`
	Price         float64   `gorm:"column:price;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"price"`
	OriginalPrice float64   `gorm:"column:original_price;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"original_price"`
	CostPrice     float64   `gorm:"column:cost_price;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"cost_price"`
	Stock         int64     `gorm:"column:stock;type:INT;not null;default:0" json:"stock"`
	Weight        float64   `gorm:"column:weight;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"weight"`
	CategoryId    int64     `gorm:"column:category_id;type:INT UNSIGNED;index:idx_category;not null;default:0" json:"category_id"`
	BrandId       int64     `gorm:"column:brand_id;type:INT UNSIGNED;index:idx_brand;not null;default:0" json:"brand_id"`
	Status        int64     `gorm:"column:status;type:TINYINT;index:idx_status;not null;default:1" json:"status"`
	Featured      int64     `gorm:"column:featured;type:TINYINT(1);size:1;index:idx_featured;not null;default:0" json:"featured"`
	SoldCount     int64     `gorm:"column:sold_count;type:INT UNSIGNED;not null;default:0" json:"sold_count"`
	ViewCount     int64     `gorm:"column:view_count;type:INT UNSIGNED;not null;default:0" json:"view_count"`
	CreatedAt     time.Time `gorm:"column:created_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP" json:"created_at"`
	UpdatedAt     time.Time `gorm:"column:updated_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" json:"updated_at"`
}

func product_id() Column[int64] {
	return "id"
}

func (s *Product) ColumnId() Column[int64] {
	return product_id()
}

func product_name() Column[string] {
	return "name"
}

func (s *Product) ColumnName() Column[string] {
	return product_name()
}

func product_sku() Column[string] {
	return "sku"
}

func (s *Product) ColumnSku() Column[string] {
	return product_sku()
}

func product_description() Column[*string] {
	return "description"
}

func (s *Product) ColumnDescription() Column[*string] {
	return product_description()
}

func product_price() Column[float64] {
	return "price"
}

func (s *Product) ColumnPrice() Column[float64] {
	return product_price()
}

func product_original_price() Column[float64] {
	return "original_price"
}

func (s *Product) ColumnOriginalPrice() Column[float64] {
	return product_original_price()
}

func product_cost_price() Column[float64] {
	return "cost_price"
}

func (s *Product) ColumnCostPrice() Column[float64] {
	return product_cost_price()
}

func product_stock() Column[int64] {
	return "stock"
}

func (s *Product) ColumnStock() Column[int64] {
	return product_stock()
}

func product_weight() Column[float64] {
	return "weight"
}

func (s *Product) ColumnWeight() Column[float64] {
	return product_weight()
}

func product_category_id() Column[int64] {
	return "category_id"
}

func (s *Product) ColumnCategoryId() Column[int64] {
	return product_category_id()
}

func product_brand_id() Column[int64] {
	return "brand_id"
}

func (s *Product) ColumnBrandId() Column[int64] {
	return product_brand_id()
}

func product_status() Column[int64] {
	return "status"
}

func (s *Product) ColumnStatus() Column[int64] {
	return product_status()
}

func product_featured() Column[int64] {
	return "featured"
}

func (s *Product) ColumnFeatured() Column[int64] {
	return product_featured()
}

func product_sold_count() Column[int64] {
	return "sold_count"
}

func (s *Product) ColumnSoldCount() Column[int64] {
	return product_sold_count()
}

func product_view_count() Column[int64] {
	return "view_count"
}

func (s *Product) ColumnViewCount() Column[int64] {
	return product_view_count()
}

func product_created_at() Column[time.Time] {
	return "created_at"
}

func (s *Product) ColumnCreatedAt() Column[time.Time] {
	return product_created_at()
}

func product_updated_at() Column[time.Time] {
	return "updated_at"
}

func (s *Product) ColumnUpdatedAt() Column[time.Time] {
	return product_updated_at()
}

func (t *Product) TableName() string {
	return Schema() + ".product"
}
