package shop

import "time"

/* ======================
** DO NOT EDIT THIS FILE!
** ======================
** GENERATED WITH GOMODEL
** Time: 2025-03-09T13:35:39+08:00
** Author: Gormodel
 */

type Order struct {
	Id             int64      `gorm:"column:id;type:INT UNSIGNED;primaryKey;not null;autoIncrement" json:"id"`
	OrderNo        string     `gorm:"column:order_no;type:VARCHAR(50);size:50;uniqueIndex:uk_order_no;not null" json:"order_no"`
	UserId         int64      `gorm:"column:user_id;type:INT UNSIGNED;index:idx_user;not null" json:"user_id"`
	TotalAmount    float64    `gorm:"column:total_amount;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"total_amount"`
	PaymentAmount  float64    `gorm:"column:payment_amount;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"payment_amount"`
	DiscountAmount float64    `gorm:"column:discount_amount;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"discount_amount"`
	ShippingFee    float64    `gorm:"column:shipping_fee;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"shipping_fee"`
	TaxAmount      float64    `gorm:"column:tax_amount;type:DECIMAL(10,2);size:10;precision:2;not null;default:0.00" json:"tax_amount"`
	Status         int64      `gorm:"column:status;type:TINYINT;index:idx_status;not null;default:1" json:"status"`
	PaymentMethod  int64      `gorm:"column:payment_method;type:TINYINT;not null;default:1" json:"payment_method"`
	PaymentStatus  int64      `gorm:"column:payment_status;type:TINYINT;index:idx_payment_status;not null;default:0" json:"payment_status"`
	PaymentTime    *time.Time `gorm:"column:payment_time;type:DATETIME;default:NULL COMMENT " json:"payment_time"`
	ShippingStatus int64      `gorm:"column:shipping_status;type:TINYINT;index:idx_shipping_status;not null;default:0" json:"shipping_status"`
	ShippingTime   *time.Time `gorm:"column:shipping_time;type:DATETIME;default:NULL COMMENT " json:"shipping_time"`
	CompletionTime *time.Time `gorm:"column:completion_time;type:DATETIME;default:NULL COMMENT " json:"completion_time"`
	CancelTime     *time.Time `gorm:"column:cancel_time;type:DATETIME;default:NULL COMMENT " json:"cancel_time"`
	RefundTime     *time.Time `gorm:"column:refund_time;type:DATETIME;default:NULL COMMENT " json:"refund_time"`
	Remark         *string    `gorm:"column:remark;type:VARCHAR(500);size:500;default:NULL COMMENT " json:"remark"`
	CreatedAt      time.Time  `gorm:"column:created_at;type:DATETIME;index:idx_created_at;not null;default:CURRENT_TIMESTAMP" json:"created_at"`
	UpdatedAt      time.Time  `gorm:"column:updated_at;type:DATETIME;not null;default:CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" json:"updated_at"`
}

func order_id() Column[int64] {
	return "id"
}

func (s *Order) ColumnId() Column[int64] {
	return order_id()
}

func order_order_no() Column[string] {
	return "order_no"
}

func (s *Order) ColumnOrderNo() Column[string] {
	return order_order_no()
}

func order_user_id() Column[int64] {
	return "user_id"
}

func (s *Order) ColumnUserId() Column[int64] {
	return order_user_id()
}

func order_total_amount() Column[float64] {
	return "total_amount"
}

func (s *Order) ColumnTotalAmount() Column[float64] {
	return order_total_amount()
}

func order_payment_amount() Column[float64] {
	return "payment_amount"
}

func (s *Order) ColumnPaymentAmount() Column[float64] {
	return order_payment_amount()
}

func order_discount_amount() Column[float64] {
	return "discount_amount"
}

func (s *Order) ColumnDiscountAmount() Column[float64] {
	return order_discount_amount()
}

func order_shipping_fee() Column[float64] {
	return "shipping_fee"
}

func (s *Order) ColumnShippingFee() Column[float64] {
	return order_shipping_fee()
}

func order_tax_amount() Column[float64] {
	return "tax_amount"
}

func (s *Order) ColumnTaxAmount() Column[float64] {
	return order_tax_amount()
}

func order_status() Column[int64] {
	return "status"
}

func (s *Order) ColumnStatus() Column[int64] {
	return order_status()
}

func order_payment_method() Column[int64] {
	return "payment_method"
}

func (s *Order) ColumnPaymentMethod() Column[int64] {
	return order_payment_method()
}

func order_payment_status() Column[int64] {
	return "payment_status"
}

func (s *Order) ColumnPaymentStatus() Column[int64] {
	return order_payment_status()
}

func order_payment_time() Column[*time.Time] {
	return "payment_time"
}

func (s *Order) ColumnPaymentTime() Column[*time.Time] {
	return order_payment_time()
}

func order_shipping_status() Column[int64] {
	return "shipping_status"
}

func (s *Order) ColumnShippingStatus() Column[int64] {
	return order_shipping_status()
}

func order_shipping_time() Column[*time.Time] {
	return "shipping_time"
}

func (s *Order) ColumnShippingTime() Column[*time.Time] {
	return order_shipping_time()
}

func order_completion_time() Column[*time.Time] {
	return "completion_time"
}

func (s *Order) ColumnCompletionTime() Column[*time.Time] {
	return order_completion_time()
}

func order_cancel_time() Column[*time.Time] {
	return "cancel_time"
}

func (s *Order) ColumnCancelTime() Column[*time.Time] {
	return order_cancel_time()
}

func order_refund_time() Column[*time.Time] {
	return "refund_time"
}

func (s *Order) ColumnRefundTime() Column[*time.Time] {
	return order_refund_time()
}

func order_remark() Column[*string] {
	return "remark"
}

func (s *Order) ColumnRemark() Column[*string] {
	return order_remark()
}

func order_created_at() Column[time.Time] {
	return "created_at"
}

func (s *Order) ColumnCreatedAt() Column[time.Time] {
	return order_created_at()
}

func order_updated_at() Column[time.Time] {
	return "updated_at"
}

func (s *Order) ColumnUpdatedAt() Column[time.Time] {
	return order_updated_at()
}

func (t *Order) TableName() string {
	return Schema() + ".order"
}
